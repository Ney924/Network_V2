{"version":3,"sources":["components/hoc/AuthRedirect.js","utils/validators/validator.js","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["withAuthRedirect","Component","RedirectComponent","this","props","isAuth","to","React","connect","state","auth","required","value","maxLenghtCreator","maxlenght","length","DialogsItem","Path","id","className","name","MessageItem","message","maxLenght150","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","Dialogs","dialogsElemets","dialogsPage","dialogsData","map","d","messageElements","messagesData","m","values","addMessage","newMessageBody","isAuthRedirectComponent","DialogsContainer","dispatch","addMessageAC"],"mappings":"8NAKaA,EAAmB,SAACC,GACzB,IAKMC,EANiC,4JAO/B,WACQ,OAAwB,IAApBC,KAAKC,MAAMC,OAAyB,cAAC,IAAD,CAAUC,GAAI,WAC/C,cAACL,EAAD,eAAeE,KAAKC,YATJ,GAMPG,IAAMN,WAOtC,OADmCO,aAXZ,SAACC,GAChB,MAAO,CACCJ,OAAQI,EAAMC,KAAKL,UASAG,CAA0BN,K,iCCjBrE,oEAAO,IAAMS,EAAW,SAACC,GACjB,IAAIA,EACJ,MAAO,2LAGFC,EAAmB,SAACC,GAAD,OAAe,SAACF,GACxC,GAAIA,EAAMG,OAASD,EAAW,MAAM,0IAAN,OAAmCA,EAAnC,6D,kJCUvBE,EAZK,SAACZ,GAEb,IAAIa,EAAO,YAAcb,EAAMc,GAE/B,OACQ,qBAAKC,UAAU,eAAf,SACQ,cAAC,IAAD,CAASb,GAAIW,EAAb,SAAoBb,EAAMgB,UCGnCC,G,OAVK,SAACjB,GACb,OACQ,qBAAKe,UAAU,WAAf,SACQ,sBAAMA,UAAU,eAAhB,SAAgCf,EAAMkB,c,kCCGxDC,EAAeV,YAAiB,KAyChCW,EAAoBC,YAAU,CAACC,KAAM,kBAAjBD,EAdN,SAACrB,GACb,OACQ,uBAAMe,UAAU,cAAcQ,SAAUvB,EAAMwB,aAA9C,UACQ,cAACC,EAAA,EAAD,CACQC,YAAY,oGACZC,UAAWC,IACXZ,KAAM,iBACNa,SAAU,CAACtB,IAAUY,KAE7B,kGAQTW,EA1CC,SAAC9B,GACT,IAAI+B,EAAiB/B,EAAMgC,YAAYC,YAAYC,KAAI,SAACC,GAAD,OAAM,cAAC,EAAD,CAAanB,KAAMmB,EAAEnB,KAAMF,GAAIqB,EAAErB,QAC1FsB,EAAkBpC,EAAMgC,YAAYK,aAAaH,KAAI,SAACI,GAAD,OAAM,cAAC,EAAD,CAAaxB,GAAIwB,EAAExB,GAAII,QAASoB,EAAEpB,aAMjG,OACQ,sBAAKH,UAAU,UAAf,UACO,qBAAKA,UAAU,eAAf,SACSgB,IAGR,sBAAKhB,UAAU,gBAAf,UACQ,8BACSqB,IAET,cAAChB,EAAD,CAAkBG,SAdpB,SAACgB,GACfvC,EAAMwC,WAAWD,EAAOE,0B,0BCMpCC,EAA0B9C,YAAiBkC,GAE3Ca,EAAmBvC,aAjBD,SAACC,GACf,MAAO,CACC2B,YAAa3B,EAAM2B,YACnB/B,OAAQI,EAAMC,KAAKL,WAIV,SAAC2C,GAClB,MAAO,CACCJ,WAAY,SAACC,GAAoBG,EAASC,YAAaJ,QAQhDrC,CAA6CsC,GAErDC","file":"static/js/4.46dbcb31.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n        let mapStateRedirect = (state) => {\r\n                return {\r\n                        isAuth: state.auth.isAuth,\r\n                }\r\n        }\r\n        class RedirectComponent extends React.Component {\r\n                render () {\r\n                        if (this.props.isAuth===false) { return <Redirect to={'/login'}/> }\r\n                        return <Component {...this.props}/>\r\n                };\r\n        } ;\r\n        let ConnectAuthRedirectComponent = connect(mapStateRedirect)(RedirectComponent)\r\n        return ConnectAuthRedirectComponent;\r\n}\r\n","export const required = (value) => {\r\n        if (value) return undefined;\r\n        return \"Поле обязательное для заполнения !!!!!\"     ; \r\n}\r\n\r\nexport const maxLenghtCreator = (maxlenght) => (value) => {\r\n        if (value.length > maxlenght) return `Максимальная длина поста ${maxlenght} символов !!!!`;\r\n        return undefined; \r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './DialogsItem.css';\r\n\r\nconst DialogsItem = (props) => {\r\n\r\n        let Path = '/dialogs/' + props.id;\r\n\r\n        return (\r\n                <div className='dialigs-item'>\r\n                        <NavLink to={Path}>{props.name}</NavLink>\r\n                </div>\r\n        )\r\n}\r\n\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport './MessageItem.css';\r\n\r\nconst MessageItem = (props) => {\r\n        return (\r\n                <div className='messages'>\r\n                        <span className='message-item'>{props.message}</span>\r\n                </div>\r\n               \r\n                \r\n        )\r\n}\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport './Dialogs.css';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport MessageItem from './MessageItem/MessageItem';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLenghtCreator } from \"./../../utils/validators/validator\";\r\nimport { Input } from '../common/formsControls/formsControls';\r\n\r\n\r\nconst maxLenght150 = maxLenghtCreator(150)\r\n\r\nconst Dialogs = (props) => {\r\n        let dialogsElemets = props.dialogsPage.dialogsData.map((d)=> <DialogsItem name={d.name} id={d.id}/>)\r\n        let messageElements = props.dialogsPage.messagesData.map((m)=> <MessageItem id={m.id} message={m.message}/>)\r\n\r\n        const addNewMessage = (values) => {\r\n                props.addMessage(values.newMessageBody)\r\n        }\r\n\r\n        return (\r\n                <div className='dialogs'>\r\n                       <div className='dialog-items'>\r\n                               {dialogsElemets} \r\n                       </div>\r\n                       \r\n                        <div className='message-block'>\r\n                                <div> \r\n                                        {messageElements}\r\n                                </div>\r\n                                <MessageReduxForm onSubmit={addNewMessage}/>\r\n                        </div>\r\n                       \r\n                </div>\r\n        );\r\n}\r\n\r\nconst MessageForm = (props) => {\r\n        return (\r\n                <form className='add-message' onSubmit={props.handleSubmit}>\r\n                        <Field \r\n                                placeholder='Введите сообщение' \r\n                                component={Input} \r\n                                name={'newMessageBody'}\r\n                                validate={[required, maxLenght150]}\r\n                        />\r\n                        <button>Отправить</button>\r\n                </form>\r\n        )\r\n}\r\n\r\nconst MessageReduxForm =  reduxForm({form: 'addMessageForm'})(MessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n/*  return (\r\n                <div className='dialogs'>\r\n                       <div className='dialog-items'>\r\n                               {dialogsElemets} \r\n                       </div>\r\n                       \r\n                        <div className='message-block'>\r\n                                <div> \r\n                                        {messageElements}\r\n                                </div>\r\n                                <div className='add-message'>\r\n                                        <input \r\n                                                placeholder='Введите сообщение'\r\n                                                ref={newMessageElement} \r\n                                                onChange={onMessageChange}\r\n                                                value={props.newMessageText}\r\n                                        />\r\n                                                \r\n                                        <button onClick={onAddMessage}>Отправить</button>\r\n                                </div>\r\n                        </div>\r\n                       \r\n                </div>\r\n        ); */","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {addMessageAC, } from \"../Redux/dialogs-reducer\";\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../hoc/AuthRedirect';\r\n//import { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n        return {\r\n                dialogsPage: state.dialogsPage,\r\n                isAuth: state.auth.isAuth,\r\n        }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n        return {\r\n                addMessage: (newMessageBody) => {dispatch(addMessageAC(newMessageBody))},\r\n        }\r\n}\r\n\r\n//export default compose()()\r\n\r\nlet isAuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\nlet DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(isAuthRedirectComponent)\r\n\r\nexport default DialogsContainer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n//!Всякое стаарое\r\n/* const DialogsContainer = (props) => {\r\n        let state = props.store.getState().dialogsPage;\r\n        \r\n        let addMessage = () => {\r\n                props.store.dispatch(addMessageAtionCreator());\r\n        }\r\n        \r\n        let onMessageChange = (text) => {\r\n                props.store.dispatch(onMessageChangeActionCreator(text));\r\n        }\r\n\r\n        return <Dialogs \r\n                addMessage={addMessage}\r\n                updateNewMessageText={onMessageChange}\r\n                messagesData={state.messagesData}\r\n                newMessageText={state.newMessageText}\r\n                dialogsData={state.dialogsData}\r\n        />\r\n} */\r\n /* updateNewMessageText: (text) => {dispatch(onMessageChangeActionCreator(text))} */"],"sourceRoot":""}